package com.seuprojeto.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import java.math.BigDecimal;

@Entity
public class Funcionario {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank(message = "Nome √© obrigat√≥rio")
    private String nome;

    @Email(message = "Email inv√°lido")
    @NotBlank(message = "Email √© obrigat√≥rio")
    @Column(unique = true)
    private String email;

    @NotBlank(message = "Cargo √© obrigat√≥rio")
    private String cargo;

    @NotNull(message = "Sal√°rio √© obrigat√≥rio")
    @DecimalMin(value = "0.0", inclusive = false, message = "Sal√°rio deve ser maior que zero")
    private BigDecimal salario;

    // Getters e Setters
}
üß† 2. repository/FuncionarioRepository.java
java
Copiar
Editar
package com.seuprojeto.repository;

import com.seuprojeto.model.Funcionario;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface FuncionarioRepository extends JpaRepository<Funcionario, Long> {
    Optional<Funcionario> findByEmail(String email);
}
üß∞ 3. service/FuncionarioService.java
java
Copiar
Editar
package com.seuprojeto.service;

import com.seuprojeto.exception.EmailJaExisteException;
import com.seuprojeto.model.Funcionario;
import com.seuprojeto.repository.FuncionarioRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class FuncionarioService {

    @Autowired
    private FuncionarioRepository repository;

    public Funcionario salvar(Funcionario funcionario) {
        if (repository.findByEmail(funcionario.getEmail()).isPresent()) {
            throw new EmailJaExisteException("Email j√° cadastrado: " + funcionario.getEmail());
        }
        return repository.save(funcionario);
    }

    public List<Funcionario> listarTodos() {
        return repository.findAll();
    }

    public Funcionario buscarPorId(Long id) {
        return repository.findById(id)
                .orElseThrow(() -> new RuntimeException("Funcion√°rio n√£o encontrado com ID: " + id));
    }

    public Funcionario atualizar(Long id, Funcionario atualizado) {
        Funcionario existente = buscarPorId(id);
        if (!existente.getEmail().equals(atualizado.getEmail()) &&
                repository.findByEmail(atualizado.getEmail()).isPresent()) {
            throw new EmailJaExisteException("Email j√° cadastrado: " + atualizado.getEmail());
        }

        existente.setNome(atualizado.getNome());
        existente.setEmail(atualizado.getEmail());
        existente.setCargo(atualizado.getCargo());
        existente.setSalario(atualizado.getSalario());
        return repository.save(existente);
    }

    public void deletar(Long id) {
        repository.deleteById(id);
    }
}
üåê 4. controller/WelcomeController.java
java
Copiar
Editar
package com.seuprojeto.controller;

import org.springframework.web.bind.annotation.*;

@RestController
public class WelcomeController {

    @GetMapping("/")
    public String boasVindas() {
        return "Bem-vindo √† API de Funcion√°rios!";
    }

    @GetMapping("/dev")
    public String desenvolvedor() {
        return "Desenvolvido por Seu Nome";
    }
}
üë®‚Äçüíº 5. controller/FuncionarioController.java
java
Copiar
Editar
package com.seuprojeto.controller;

import com.seuprojeto.model.Funcionario;
import com.seuprojeto.service.FuncionarioService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@RestController
@RequestMapping("/funcionarios")
public class FuncionarioController {

    @Autowired
    private FuncionarioService service;

    @PostMapping
    public ResponseEntity<?> criar(@Valid @RequestBody Funcionario funcionario) {
        Funcionario salvo = service.salvar(funcionario);
        return ResponseEntity.status(201).body(Map.of("status", 201, "dados", salvo));
    }

    @GetMapping
    public ResponseEntity<?> listar() {
        return ResponseEntity.ok(Map.of("status", 200, "dados", service.listarTodos()));
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> buscar(@PathVariable Long id) {
        return ResponseEntity.ok(Map.of("status", 200, "dados", service.buscarPorId(id)));
    }

    @PutMapping("/{id}")
    public ResponseEntity<?> atualizar(@PathVariable Long id, @Valid @RequestBody Funcionario funcionario) {
        Funcionario atualizado = service.atualizar(id, funcionario);
        return ResponseEntity.ok(Map.of("status", 200, "dados", atualizado));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> deletar(@PathVariable Long id) {
        service.deletar(id);
        return ResponseEntity.ok(Map.of("status", 200, "mensagem", "Funcion√°rio deletado com sucesso"));
    }
}
‚ùå 6. Tratamento de Exce√ß√µes
exception/EmailJaExisteException.java
java
Copiar
Editar
package com.seuprojeto.exception;

public class EmailJaExisteException extends RuntimeException {
    public EmailJaExisteException(String mensagem) {
        super(mensagem);
    }
}
exception/GlobalExceptionHandler.java
java
Copiar
Editar
package com.seuprojeto.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(EmailJaExisteException.class)
    public ResponseEntity<?> handleEmailDuplicado(EmailJaExisteException ex) {
        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body(Map.of("status", 400, "erro", ex.getMessage()));
    }

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<?> handleValidacao(MethodArgumentNotValidException ex) {
        Map<String, String> erros = new HashMap<>();
        ex.getBindingResult().getFieldErrors().forEach(err -> erros.put(err.getField(), err.getDefaultMessage()));
        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body(Map.of("status", 400, "erros", erros));
    }

    @ExceptionHandler(RuntimeException.class)
    public ResponseEntity<?> handleGenerico(RuntimeException ex) {
        return ResponseEntity.status(HttpStatus.NOT_FOUND)
                .body(Map.of("status", 404, "erro", ex.getMessage()));
    }
}
üß™ 7. Testes com Postman / Insomnia
Crie duas pastas:

welcome:

GET /

GET /dev

funcionarios:

POST /funcionarios

GET /funcionarios

GET /funcionarios/{id}

PUT /funcionarios/{id}

DELETE /funcionarios/{id}

üîê 8. Seguran√ßa b√°sica (opcional)
Se quiser adicionar autentica√ß√£o b√°sica:

xml
Copiar
Editar
<!-- spring-boot-starter-security -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>